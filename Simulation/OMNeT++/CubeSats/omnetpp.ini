[Config BaseConfig]
network = Base
#sim-time-limit = 500s

#
# Random Numbers
#
num-rngs = 3
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2

#
# Network Parameters
#
*.radioMediumType = "IdealRadioMedium"
*.numMasters = ${NM=1}
*.numSlaves = ${NS=(${NM})}
*.slavesPerMaster = ${SPM=(${NS}/${NM})}

#
# Host
#
# https://omnetpp.org/doc/inet/api-current/neddoc/inet.node.inet.NodeBase.html
# https://omnetpp.org/doc/inet/api-current/neddoc/inet.node.aodv.AODVRouter.html
#
# --- NodeBase
#*.nodeMaster[*].hasStatus = false
#*.nodeMaster[*].forwarding = true
#*.nodeMaster[*].energyStorageType = ""
#*.nodeMaster[*].energyGeneratorType = ""
# --- StandardHost
*.nodeMaster[*].numUdpApps = 1
*.nodeSlave[*].numUdpApps = 1
# --- AODVRouter
# TODO Explore AODV example
# See link: routingtable, pcap, aodv(many parameters)

#
# Application
#
# https://omnetpp.org/doc/inet/api-current/neddoc/index.html?p=inet.applications.udpapp.UDPSink.html
#
# --- Master 0
*.nodeMaster[*].udpApp[0].typename = "UDPSink"
*.nodeMaster[*].udpApp[0].localPort = 5000
#*.nodeMaster[0].udpApp[0].startTime = # Default 0s
#*.nodeMaster[0].udpApp[0].stopTime = # Default -1 (forever)


# https://omnetpp.org/doc/inet/api-current/neddoc/index.html?p=inet.applications.udpapp.UDPBasicApp.html
#
# !!! Master NOT routing slave packets while using UDPBasicApp
#*.nodeMaster[1..].udpApp[0].typename = "UDPBasicApp"
#*.nodeMaster[1..].udpApp[0].destAddresses = "nodeMaster[0]"
#*.nodeMaster[1..].udpApp[0].packetName = "UDPDataMaster"
#*.nodeMaster[1..].udpApp[0].destPort = 5000
#*.nodeMaster[1..].udpApp[0].messageLength = exponential(128B)
#*.nodeMaster[1..].udpApp[0].startTime = 30s
#*.nodeMaster[1..].udpApp[0].sendInterval = exponential(100ms)

*.nodeSlave[*].udpApp[0].typename = "UDPBasicApp"
*.nodeSlave[*].udpApp[0].destAddresses = "nodeMaster[0]"
*.nodeSlave[*].udpApp[0].packetName = "UDPDataSlave"
*.nodeSlave[*].udpApp[0].destPort = 5000
*.nodeSlave[*].udpApp[0].messageLength = exponential(128B)
*.nodeSlave[*].udpApp[0].startTime = 30s
*.nodeSlave[*].udpApp[0].sendInterval = exponential(100ms)
#*.nodeSlave[*].udpApp[0].stopTime = # Default -1 (forever)
#*.nodeSlave[*].udpApp[0].localPort = # Default -1
#*.nodeSlave[*].udpApp[0].localAddress = # ""
#*.nodeSlave[*].udpApp[0].timeToLive = # Default -1 (forever)
# ... More params available

#
# Routing
#
#**.routingTable.netmaskRoutes = ""
**.configurator.config = xml("<config><interface hosts='*' address='10.10.x.x' netmask='255.255.0.0'/></config>")
**.configurator.addStaticRoutes = false
**.configurator.optimizeRoutes = false
**.forwarding = true

#
# NIC
#
*.node*[*].wlan[*].typename = "WirelessNic"

# --- MAC
#
# https://omnetpp.org/doc/inet/api-current/neddoc/inet.linklayer.lmac.LMacLayer.html
#
*.node*[*].wlan[*].macType = "CubeMacLayer"
*.node*[*].wlan[*].mac.address = "auto"
*.node*[*].wlan[*].mac.slotDuration = 100ms
*.node*[*].wlan[*].mac.headerLength = 10B
*.node*[*].wlan[*].mac.mtu = 0B # = 0B -> no fragmentation, passed up by I/F
*.node*[*].wlan[*].mac.numSlots = (${NM})+1 # +1 for the slave uplink slot
*.node*[*].wlan[*].mac.queueLength = 10*${NM}
# Added
*.nodeSlave[*].wlan[*].mac.isSlave = true
*.node*[*].wlan[*].mac.reservedMobileSlots = 0 # !!! Imporant to hold this at zero until it is removed
#

#*.node*[*].wlan[*].mac.bitrate = 2Mbps # How does this affect the transmitter bitrate?
#*.node*[*].wlan[*].mac.radioModule = "^.radio" # Path to radio module

# --- Radio
#
# https://omnetpp.org/doc/inet/api-current/neddoc/inet.physicallayer.common.packetlevel.Radio.html
# 
*.node*[*].wlan[*].radioType = "IdealRadio"
#*.node*[*].wlan[0].radio.displayCommunicationRange = true

# --- Radio: Medium (APSK)


# --- Radio: Transmitter / Receiver
*.node*[*].wlan[*].radio.transmitter.bitrate = 2Mbps
*.node*[*].wlan[*].radio.transmitter.preambleDuration = 0s
*.node*[*].wlan[*].radio.transmitter.headerBitLength = 100b
*.nodeMaster[*].wlan[*].radio.transmitter.communicationRange = 150m
*.nodeSlave[*].wlan[*].radio.transmitter.communicationRange = 50m
*.node*[*].wlan[*].radio.transmitter.detectionRange = 0m
*.node*[*].wlan[*].radio.transmitter.interferenceRange = 0m

*.node*[*].wlan[0].radio.receiver.ignoreInterference = true

# --- General 
#**.bitrate = 2Mbps

#
# Mobility
#
*.nodeMaster[*].mobilityType = "CircleMobility"
*.nodeMaster[*].**.cx = 500m
*.nodeMaster[*].**.cy = 500m
*.nodeMaster[*].**.cz = 0m
*.nodeMaster[*].**.r = 50m
*.nodeMaster[*].**.startAngle = parentIndex() * (360deg/${NM})

*.nodeSlave[*].mobilityType = "CircleMobility"
*.nodeSlave[*].**.cx = 500m
*.nodeSlave[*].**.cy = 500m
*.nodeSlave[*].**.cz = 0m
*.nodeSlave[*].**.r = 75m
*.nodeSlave[0].**.startAngle = (parentIndex() * (360deg/${NM})) + 10deg
#*.nodeSlave[1].**.startAngle = (parentIndex() * (360deg/${NM}))
#*.nodeSlave[2].**.startAngle = (parentIndex() * (360deg/${NM})) - 10deg

#*.nodeSlave[..1].**.startAngle = (parentIndex() * (360deg/${NM})) + 5deg
#*.nodeSlave[2..].**.startAngle = (parentIndex() * (360deg/${NM})) - 5deg # The rest
# Not working
#*.nodeSlave[..((${NS}/${SPM})-1)].**.startAngle = ((parentIndex()/${SPM}) * (360deg/${NM})) + 5deg
#*.nodeSlave[(${NS}/${SPM})..].**.startAngle = ((parentIndex()/${SPM}) * (360deg/${NM})) - 5deg # The rest?

#
# Visualization
#
*.visualizer.physicalLinkVisualizer.packetNameFilter = "UDPData*"
*.visualizer.dataLinkVisualizer.packetNameFilter = "UDPData*"
#*.visualizer.dataLinkVisualizer.packetNameFilter = "AODV*"
*.visualizer.networkRouteVisualizer.packetNameFilter = "UDPData*"
#*.visualizer.mobilityVisualizer.displayMovementTrail = true


[Config APSKRadio]
extends = BaseConfig

*.radioMediumType = "APSKScalarRadioMedium"
*.radioMedium.backgroundNoise.power = -110dBm 
*.radioMedium.mediumLimitCache.carrierFrequency = 2GHz 

*.node*[*].wlan[*].radioType = "APSKScalarRadio" 

*.node*[*].wlan[0].radio.carrierFrequency = 2.412GHz 
*.node*[*].wlan[0].radio.bandwidth = 2MHz 

*.node*[*].wlan[*].radio.transmitter.power = 2mW 
*.node*[*].wlan[*].radio.transmitter.preambleDuration = 0s 
*.node*[*].wlan[*].radio.transmitter.headerBitLength = 100b 
*.host[*].wlan[*].radio.transmitter.modulation = "BPSK"

*.node*[*].wlan[*].radio.receiver.sensitivity = -85dBm 
*.node*[*].wlan[*].radio.receiver.energyDetection = -85dBm 
*.node*[*].wlan[*].radio.receiver.snirThreshold = 4dB 

[Config EnergyModelling]
extends = APSKRadio

*.node*[*].energyStorageType = "IdealEnergyStorage"
*.node*[*].wlan[0].radio.energyConsumerType = "StateBasedEnergyConsumer"

*.node*[*].wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.node*[*].wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.node*[*].wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW

*.node*[*].wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.node*[*].wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.node*[*].wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW

*.node*[*].wlan[0].radio.energyConsumer transmitterIdlePowerConsumption = 2mW
*.node*[*].wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW


