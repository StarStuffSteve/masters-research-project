
#								#
# 			Clusters			#
#								#

# TODO: Seperate ini files
[Config Clusters]
network = Base

sim-time-limit = 270s
#sim-time-limit = 1350s

# --- Random Numbers
#
num-rngs = 3
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2

# --- Multiple run repitions
#repeat = 0
#seed-set = ${runnumber} # this is the default

# --- Oracle
#*.roleOracle.hysteresis = ${2..15 step 1}
*.roleOracle.hysteresis = 3
*.roleOracle.updateFrequency = 2s

# --- Cluster Configuration
#
*.numMasters = ${NM=5}
*.slavesPerMaster = ${SPM=2}
*.numSlaves = ${NS=(${NM})*(${SPM})}
*.slaveSeperation = ${SS=10deg}

# --- Network & Routing
#
# IPv4NetworkLayer
**.networkLayer.arpType = "GlobalARP"
**.networkLayer.proxyARP = true

# --- Radio Medium
#
*.radioMediumType = "IdealRadioMedium"
#*.radioMedium[*].rangeFilter = "communicationRange"
#*.radioMedium[*].radioModeFilter = true
#*.radioMedium[*].listeningFilter = true
#*.radioMedium[*].mediumLimitCache.maxTransmissionDuration= 999s
#*.radioMedium[*].mediumLimitCache.minInterferenceTime = 999s
#*.radioMedium[*].propagationType = "ConstantTimePropagation" # Doesn't affect transmission durations which is bits/bitrate
#*.radioMedium[*].**.propagationTime = 0s

# --- Applications
#
*.node**.numUdpApps = 1
*.nodeMaster[0].udpApp[*].typename = "UDPSink"
*.node**.udpApp[*].typename = "UDPBasicApp" # All nodes which are not Master[0]
# Sink
**.udpApp[*].localPort = 5000
# BasicApp
**.udpApp[*].destAddresses = "nodeMaster[0]"
**.udpApp[*].packetName = "UDP" + substringBefore(substringAfter(fullPath(), ".node"), ".udp")
**.udpApp[*].destPort = 5000
**.udpApp[*].messageLength = ${ML = 128}B
#**.udpApp[*].sendInterval = uniform(1s)
**.udpApp[*].sendInterval = exponential(1s)
#**.udpApp[*].sendInterval  = 60s
**.udpApp[*].startTime = 0s # Time of first packet

# --- NIC -> S2S
#
*.node**.wlan[0].typename = "WirelessNic"
# MAC
*.node**.wlan[0].macType = "CubeMacLayer"
*.node**.wlan[0].mac.address = "auto"
*.node**.wlan[0].mac.bitrate = 2Mbps
*.node**.wlan[0].mac.slotDuration = ${SD = 0.1}s
*.node**.wlan[0].mac.headerLength = 1B # Cannot be 0b
*.node**.wlan[0].mac.mtu = 0B # = 0B -> no fragmentation, passed up by I/F
*.node**.wlan[0].mac.numSlots = (${NM})+1 # +1 for the uplink slot
*.node**.wlan[0].mac.queueLength = 999 # ~ Infitine considering current performance
*.node**.wlan[0].mac.startTime = 0s
*.node**.wlan[0].mac.slotPadding = ${SD}s * 0.1
*.node**.wlan[0].mac.timeoutDuration = ${SD}s * 0.2
*.nodeSlave**.wlan[0].mac.isSlave = true # Determines node behaviour mode

*.nodeSlave[0..1].wlan[0].mac.clusterId = 0
*.nodeSlave[2..3].wlan[0].mac.clusterId = 1
*.nodeSlave[4..5].wlan[0].mac.clusterId = 2
*.nodeSlave[6..7].wlan[0].mac.clusterId = 3
*.nodeSlave[8..9].wlan[0].mac.clusterId = 4
*.nodeSlave[10..11].wlan[0].mac.clusterId = 5

*.nodeMaster**.wlan[0].mac.clusterId = ancestorIndex(2)
*.node**.wlan[0].mac.slavesInCluster = ${SPM} # Used to let Master know how many messages to expect during uplink slot

# --- Radio 
#
*.node**.wlan[0].radioType = "IdealRadio"
*.node**.wlan[0].radio.radioMediumModule = "radioMedium[0]"
**.radio.displayCommunicationRange = true # Not Working
# Transmitter / Receiver
*.node**.wlan[0].radio.transmitter.bitrate = 2Mbps
*.node**.wlan[0].radio.transmitter.preambleDuration = 0s
*.node**.wlan[0].radio.transmitter.headerBitLength = 0b

*.node**.wlan[0].radio.transmitter.interferenceRange = 0m
*.node**.wlan[0].radio.receiver.ignoreInterference = true

*.nodeSlave**.wlan[0].radio.transmitter.communicationRange = 50m
*.nodeSlave**.wlan[0].radio.transmitter.detectionRange = 50m
*.nodeMaster**.wlan[0].radio.transmitter.communicationRange = 125m
*.nodeMaster**.wlan[0].radio.transmitter.detectionRange = 125m

# --- Mobility
#
# TODO Generalize if time
*.node*a**.mobilityType = "LinearMobility"
*.node**.initFromDisplayString = false
*.node*a**.angle = 270deg
*.node*a**.speed = 0mps # Calculated for realistic fly over

*.nodeMaster[0..2]**.initialX = 500m - 50m
*.nodeSlave[0..5]**.initialX = 500m - 50m - 25m

*.nodeMaster[0..2]**.initialY = 600m + (parentIndex() * 100m)
*.nodeSlave[0..5]**.initialY = 575m + (parentIndex() * 50m)
*.nodeMaster[0..2]**.constraintAreaMaxY = 600m + (parentIndex() * 100m)
*.nodeSlave[0..5]**.constraintAreaMaxY = 575m + (parentIndex() * 50m)
*.nodeMaster[0..2]**.constraintAreaMinY = 600m + (parentIndex() * 100m) - 400m
*.nodeSlave[0..5]**.constraintAreaMinY = 575m + (parentIndex() * 50m) - 400m

*.nodeMaster**.initialZ = 100m
*.nodeSlave**.initialZ = 100m

*.nodeMaster[3..5]**.initialX = 500m + 50m
*.nodeSlave[6..11]**.initialX = 500m + 50m + 25m

*.nodeMaster[3..5]**.initialY = 650m + ((parentIndex() - 3) * 100m)
*.nodeSlave[6..11]**.initialY = 625m + ((parentIndex() - 6) * 50m)
*.nodeMaster[3..5]**.constraintAreaMaxY = 650m + ((parentIndex() - 3) * 100m)
*.nodeSlave[6..11]**.constraintAreaMaxY = 625m + ((parentIndex() - 6) * 50m)
*.nodeMaster[3..5]**.constraintAreaMinY = 650m + ((parentIndex() - 3) * 100m) - 400m
*.nodeSlave[6..11]**.constraintAreaMinY = 625m + ((parentIndex() - 6) * 50m) - 400m

 # --- Results

**.lo.**.scalar-recording = false
**.arp.**.scalar-recording = false
**.arp.**.vector-recording = false
**.udp.**.scalar-recording = false
**.udp.**.vector-recording = false
**.radio.**.scalar-recording = false
**.radio.**.vector-recording = false
**.radioMedium**.scalar-recording = false
**.radioMedium**.vector-recording = false

**.energyStorage.residualCapacity.vector-recording = true
**.udpApp[*].endToEndDelay.scalar-recording = true
**.udpApp[*].rcvdPk.vector-recording = true
**.udpApp[*].rcvdPk.scalar-recording = true
**.udpApp[*].rcvdPk.statistic-recording = true
**.udpApp[*].sentPk.vector-recording = true
**.udpApp[*].sentPk.scalar-recording = true
**.udpApp[*].throughput.scalar-recording = true

**.mac."MAC Access Delay".vector-recording = true

**.dymo.VecRREQWaitRREP.vector-recording = true
**.dymo.VecRREQBackoff.vector-recording = true
**.dymo.VecRREQHolddown.vector-recording = true
**.dymo.VecCompleteRouteDiscovery.vector-recording = true
**.dymo.VecSendREPP.vector-recording = true

## Everything on
#**.statistic-recording = true
#**.scalar-recording = true
#**.vector-recording = true
#**.result-recording-modes = all

# --- Visualization
#
*.visualizer.**.packetNameFilter = "UDP*"
#*.visualizer.**.packetNameFilter = "R*"
#*.visualizer.mobilityVisualizer.displayMovementTrail = true

					#							#
					# 			DYMO			#
					#							#

[Config DYMO] 
extends = Clusters

*.hostType = "DYMORouter"

**.configurator.config = xmldoc("DYMOConfig.xml")
**.configurator.assignDisjunctSubnetAddresses = false
**.configurator.addStaticRoutes = false
**.configurator.addSubnetRoutes = false
**.configurator.addDefaultRoutes = false
**.configurator.optimizeRoutes = false
**.configurator.dumpAddresses = true
**.configurator.dumpRoutes = true

**.multicastForwarding = false # Multicast forwarding is handled by DYMO
**.networkLayer.igmp.queryInterval = 60s # Needed?

**.dymo.clientAddresses = "" # Router is always its own client
# Route remain active so long as they are used at least once within this interval -> 20 frames
**.dymo.activeInterval = 12s # 2. DYMO parameter group
**.dymo.useMulticastRREP = false
**.dymo.maxIdleTime = 200s # MAX_IDLETIME
**.dymo.maxSequenceNumberLifetime = 300s # Used to calculate default route expiration times

#**.dymo.RREQWaitRREPTime = ${1.2..7.2 step 0.6}s # Max time to wait for RREP (12 frames)
#**.dymo.RREQBackoffTime = ${0.1..1.2 step 0.1}s # Backoff = RREQBackoffTime * NumRetriesSoFar
**.dymo.RREQWaitRREPTime = 1.2s # Max time to wait for RREP (2 frames)
**.dymo.RREQBackoffTime = 0.5s # Backoff = RREQBackoffTime * NumRetriesSoFar

# How long to wait for an RREP to return -> 12 frames (DEPRECATED)
#**.dymo.routeRREQWaitTime = s # ROUTE_RREQ_WAIT_TIME
# How long to wait between failed discovery attempts -> 1 frame 
**.dymo.rreqHolddownTime = 0.6s # double UNICAST_MESSAGE_SENT_TIMEOUT @unit("s") = default(1s);

**.dymo.maxHopCount	= 20 # 3. DYMO parameter group #
**.dymo.discoveryAttemptsMax = 3 # string MAX_METRIC = default(""); double MAXTIME;
**.dymo.appendInformation = true # 4. DYMO parameter group - See DYMO.msg: AddressBlock addedNode[];
**.dymo.bufferSizePackets = -1 # BUFFER_SIZE_PACKETS
**.dymo.bufferSizeBytes	= -1B # BUFFER_SIZE_BYTES double CONTROL_TRAFFIC_LIMIT
**.dymo.maxJitter = 10ms # DYMO extension parameters - Sampling uniform to get send delay for RteMsgs
**.dymo.sendIntermediateRREP = true 
**.dymo.minHopLimit	= 1	# 1 
**.dymo.maxHopLimit	= 10 # 10

					#									#
					# 			GroundStation			#
					#									#

[Config GroundStation]
extends = DYMO
network = GroundStation # Ignore warning
result-dir = ./results/Testing/ground_testing/

*.nodeGround**.udpApp[0].typename = "UDPSink"
**.udpApp[*].typename = "UDPBasicApp" # All non-Ground nodes with BasicApp
**.udpApp[*].destAddresses = "10.2.0.1" # ... No specification of prefix?

*.nodeGround**.mobilityType = "LinearMobility"
*.nodeGround**.initFromDisplayString = false
*.nodeGround**.initialX = 500m
*.nodeGround**.initialY = 500m
*.nodeGround**.initialZ = 0m
*.nodeGround**.angle = 0deg
*.nodeGround**.speed = 0mps

					#								#
					# 			MultiNIC			#
					#								#
[Config MultiNIC]
extends = GroundStation
result-dir = ./results/Testing/multi_testing/

*.node*a**.numRadios = 2

# Static role selection
*.nodeMaster[0].dymo.isGroundMaster = true
*.nodeGround[0].dymo.isGroundStation = true
*.node**.udpApp[*].joinLocalMulticastGroups = true

# --- NIC -> S2G
#
*.nodeGround**.wlan[0].typename = "IdealWirelessNic"
*.nodeGround**.wlan[0]**.bitrate = 125kbps
*.nodeGround**.wlan[0].mac.address = "auto"
*.nodeGround**.wlan[0].mac.mtu = 0B # = 0B -> no fragmentation, passed up by I/F
*.nodeGround**.wlan[0].mac.headerLength = 1B
*.nodeGround**.wlan[0].mac.promiscuous = false
*.nodeGround**.wlan[0].mac.fullDuplex = false
*.nodeGround**.wlan[0].mac.useAck = true
*.nodeGround**.wlan[0].mac.ackTimeout = 2s

*.node**.wlan[1].typename = "IdealWirelessNic"
*.node**.wlan[1]**.bitrate = 125kbps
*.node**.wlan[1].mac.address = "auto"
*.node**.wlan[1].mac.mtu = 0B # = 0B -> no fragmentation, passed up by I/F
*.node**.wlan[1].mac.headerLength = 1B
*.node**.wlan[1].mac.promiscuous = false
*.node**.wlan[1].mac.fullDuplex = false
*.node**.wlan[1].mac.useAck = true
*.node**.wlan[1].mac.ackTimeout = 2s

# --- Radio
#
*.nodeGround**.wlan[0].radio.radioMediumModule = "radioMedium[1]"
*.nodeGround**.wlan[0].radio.transmitter.preambleDuration = 0s
*.nodeGround**.wlan[0].radio.transmitter.headerBitLength = 0b
*.nodeGround**.wlan[0].radio.transmitter.interferenceRange = 0m
*.nodeGround**.wlan[0].radio.receiver.ignoreInterference = true

*.nodeGround**.wlan[0].radio.transmitter.communicationRange = 150m # Should be enough only to talk to closest master
*.nodeGround**.wlan[0].radio.transmitter.detectionRange = 150m

*.node**.wlan[1].radio.radioMediumModule = "radioMedium[1]"
*.node**.wlan[1].radio.transmitter.preambleDuration = 0s
*.node**.wlan[1].radio.transmitter.headerBitLength = 0b
*.node**.wlan[1].radio.transmitter.interferenceRange = 0m
*.node**.wlan[1].radio.receiver.ignoreInterference = true

*.node**.wlan[1].radio.transmitter.communicationRange = 150m
*.node**.wlan[1].radio.transmitter.detectionRange = 150m

					#											#
					#			OrbitingGroundStation			#
					#											#

[Config Orbiting]
extends = MultiNIC

*.node*a**.speed = 1.5mps # Calculated for realistic fly over (See notebook)

					#									#
					#			EnergyModelling			#
					#									#

# !!!
# IEEE Scenario 1
# !!!
[Config EnergyModelling]
extends = Orbiting
result-dir = ./results/IEEE/S1/

*.node*a**.energyStorageType = "IdealEnergyStorage"
*.node*a**.radio.energyConsumerType = "StateBasedEnergyConsumer"

# Master S2S Interfaces (TDMA)
*.nodeMaster*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.nodeMaster*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.nodeMaster*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 2mW
*.nodeMaster*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 25mW
*.nodeMaster*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 100mW
*.nodeMaster*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 200mW # From Gamalink
*.nodeMaster*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 25mW
*.nodeMaster*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 1.5W # From Gamalink

# Slave S2S Interfaces (CDMA)
*.nodeSlave*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.nodeSlave*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.nodeSlave*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 2mW
*.nodeSlave*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 25mW
*.nodeSlave*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 100mW
*.nodeSlave*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 225mW # +16% for CDMA
*.nodeSlave*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 25mW
*.nodeSlave*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 1.75W # +16% for CDMA

# Slave and Master S2G Interfaces
*.node*a*.wlan[1].radio.energyConsumer.offPowerConsumption = 0mW
*.node*a*.wlan[1].radio.energyConsumer.sleepPowerConsumption = 1mW
*.node*a*.wlan[1].radio.energyConsumer.switchingPowerConsumption = 2mW
*.node*a*.wlan[1].radio.energyConsumer.receiverIdlePowerConsumption = 25mW
*.node*a*.wlan[1].radio.energyConsumer.receiverBusyPowerConsumption = 250mW
*.node*a*.wlan[1].radio.energyConsumer.receiverReceivingPowerConsumption = 500mW # Assumed
*.node*a*.wlan[1].radio.energyConsumer.transmitterIdlePowerConsumption = 25mW
*.node*a*.wlan[1].radio.energyConsumer.transmitterTransmittingPowerConsumption = 3W # From EDSN/Nodes

# !!!
# IEEE Baseline
# !!!
[Config NoEnergySaving]
extends = EnergyModelling
result-dir = ./results/IEEE/Baseline/

*.node*a**.mac.energySavingFeatures = false

# !!!
# No longer in use
# !!!
[Config TDMA]
extends = EnergyModelling
result-dir = ./results/S2/TDMA/
sim-time-limit = 810s

*.node*a**.wlan[0].mac.pureTDMA = true
*.nodeSlave**.wlan[0].mac.isSlave = false # Boom
*.nodeSlave**.wlan[0].mac.clusterId = (${NM}) + ancestorIndex(2) 
*.node*a**.wlan[0].mac.numSlots = (${NM} + ${NS})

*.node*a**.wlan[0].radio.transmitter.communicationRange = 125m
*.node*a**.wlan[0].radio.transmitter.detectionRange = 125m

*.nodeSlave*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 200mW # +16% for CDMA
*.nodeSlave*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 1.5W # +16% for CDMA

# !!!
# No longer in use
# !!!
[Config CSMA]
extends = EnergyModelling
result-dir = ./results/S2/CSMA/
sim-time-limit = 810s

# Master & Slave S2S Antennae
#*.node*a**.wlan[0].macType = "CSMA" # Cannot handle multicasting

*.node*a**.wlan[0].macType = "CsmaCaMac"
*.node*a**.wlan[0].mac.bitrate = 2Mbps
*.node*a**.wlan[0].mac.headerLength = 1B
*.node*a**.wlan[0].mac.useAck = false
*.node*a**.wlan[0].mac.mtu = 9999999 # Ignore error
# Slightly staggered start
*.nodeMaster**.udpApp[*].startTime = 0s + (ancestorIndex(1) * 10ms)
*.nodeSlave**.udpApp[*].startTime = 0s + ((ancestorIndex(1) + (${NM})) * 10ms)
# !!!
# !!!
# !!!
**.udpApp[*].stopTime = 1300s

# !!!
# IEEE Scenario 2
# !!!
[Config ElectWithEnergy]
extends = EnergyModelling
result-dir = ./results/IEEE/S2

*.roleOracle.useEnergies = true
#*.roleOracle.energyRankWeight = ${0.1..0.9 step 0.1}
*.roleOracle.energyRankWeight = 0.3
